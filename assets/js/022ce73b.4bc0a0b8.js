(self.webpackChunkhhow_09_github_io=self.webpackChunkhhow_09_github_io||[]).push([[9962],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return s},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),m=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=m(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=m(r),d=o,h=u["".concat(c,".").concat(d)]||u[d]||p[d]||a;return r?n.createElement(h,i(i({ref:t},s),{},{components:r})):n.createElement(h,i({ref:t},s))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var m=2;m<a;m++)i[m]=r[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2520:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},metadata:function(){return c},toc:function(){return m},default:function(){return p}});var n=r(2122),o=r(9756),a=(r(7294),r(3905)),i=["components"],l={},c={unversionedId:"react/react-performance-optimization",id:"react/react-performance-optimization",isDocsHomePage:!1,title:"Performance Optimization of React",description:"Terms",source:"@site/docs/react/8-react-performance-optimization.md",sourceDirName:"react",slug:"/react/react-performance-optimization",permalink:"/react/react-performance-optimization",editUrl:"https://github.com/hhow09/hhow09.github.io/blob/source/docs/react/8-react-performance-optimization.md",version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Redux and Flux",permalink:"/react/redux-flux"},next:{title:"React v.s. Vue",permalink:"/react/react-vs-vue"}},m=[{value:"Terms",id:"terms",children:[]},{value:"Memoization",id:"memoization",children:[{value:"Why do they need to remember?",id:"why-do-they-need-to-remember",children:[]},{value:"What do they remember?",id:"what-do-they-remember",children:[]},{value:"When do they remember?",id:"when-do-they-remember",children:[]},{value:"Declare function &amp; constant outside vs inside component?",id:"declare-function--constant-outside-vs-inside-component",children:[]},{value:"Ways to Memoize a constant / Object",id:"ways-to-memoize-a-constant--object",children:[]},{value:"Ways to Memoize a function",id:"ways-to-memoize-a-function",children:[]},{value:"How to Prevent unnecessary re-render of a component",id:"how-to-prevent-unnecessary-re-render-of-a-component",children:[]}]},{value:"How to Inspect?",id:"how-to-inspect",children:[{value:"Chrome DevTools Performance",id:"chrome-devtools-performance",children:[]},{value:"React Profiler",id:"react-profiler",children:[]},{value:"Profiler API",id:"profiler-api",children:[]},{value:"Meaning of Profiling value",id:"meaning-of-profiling-value",children:[]}]},{value:"Reference",id:"reference",children:[]}],s={toc:m};function p(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"terms"},"Terms"),(0,a.kt)("p",null,"// TODO\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.chrome.com/docs/devtools/evaluate-performance/reference/"},"https://developer.chrome.com/docs/devtools/evaluate-performance/reference/")),(0,a.kt)("h2",{id:"memoization"},"Memoization"),(0,a.kt)("h3",{id:"why-do-they-need-to-remember"},"Why do they need to remember?"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Computation is expensive"),(0,a.kt)("li",{parentName:"ol"},"Keep consistent reference to the memory address"),(0,a.kt)("li",{parentName:"ol"},"Reduce unnecessary re-render of a component")),(0,a.kt)("h3",{id:"what-do-they-remember"},"What do they remember?"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"React.memo: a Component"),(0,a.kt)("li",{parentName:"ol"},"useCallback: a function"),(0,a.kt)("li",{parentName:"ol"},"useMemo: a value"),(0,a.kt)("li",{parentName:"ol"},"useRef: a value")),(0,a.kt)("h3",{id:"when-do-they-remember"},"When do they remember?"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"React.memo: when equality function returns ",(0,a.kt)("inlineCode",{parentName:"li"},"false")),(0,a.kt)("li",{parentName:"ol"},"useCallback: when dependency change"),(0,a.kt)("li",{parentName:"ol"},"useMemo: when dependency change"),(0,a.kt)("li",{parentName:"ol"},"useRef: when assign value to ",(0,a.kt)("inlineCode",{parentName:"li"},"ref.current"))),(0,a.kt)("h3",{id:"declare-function--constant-outside-vs-inside-component"},"Declare function & constant outside vs inside component?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Outside component: will ",(0,a.kt)("inlineCode",{parentName:"li"},"not")," be re-created on every render."),(0,a.kt)("li",{parentName:"ul"},"Inside component: will be re-created on every render.")),(0,a.kt)("h3",{id:"ways-to-memoize-a-constant--object"},"Ways to Memoize a constant / Object"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"declare outside component\nIf the value is irrelevant to props, just declare outside component."),(0,a.kt)("li",{parentName:"ol"},"useMemo: ",(0,a.kt)("inlineCode",{parentName:"li"},"const memoizedValue = useMemo(objFromProps,[dependencies])")),(0,a.kt)("li",{parentName:"ol"},"useRef: ",(0,a.kt)("inlineCode",{parentName:"li"},"const memoizedValue = useRef(objFromProps)"),"\np.s. ",(0,a.kt)("inlineCode",{parentName:"li"},"useMemo(initialValue,[])")," works same as ",(0,a.kt)("inlineCode",{parentName:"li"},"useRef(initialValue)"))),(0,a.kt)("h3",{id:"ways-to-memoize-a-function"},"Ways to Memoize a function"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"declare outside component\nIf the function is irrelevant to props, just declare outside component."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"const memoizedFunction = useCallback(funcFromProps,[dependencies])"))),(0,a.kt)("h3",{id:"how-to-prevent-unnecessary-re-render-of-a-component"},"How to Prevent unnecessary re-render of a component"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"useCallback in parent to memoize ",(0,a.kt)("inlineCode",{parentName:"li"},"method props"),"."),(0,a.kt)("li",{parentName:"ol"},"useMemo to memoize ",(0,a.kt)("inlineCode",{parentName:"li"},"non-primitive-type value"),"."),(0,a.kt)("li",{parentName:"ol"},"Wrap component with ",(0,a.kt)("inlineCode",{parentName:"li"},"React.memo")," and check the equality of props.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"how-to-inspect"},"How to Inspect?"),(0,a.kt)("h3",{id:"chrome-devtools-performance"},(0,a.kt)("a",{parentName:"h3",href:"https://developer.chrome.com/docs/devtools/evaluate-performance/reference/"},"Chrome DevTools Performance")),(0,a.kt)("p",null,"//TODO"),(0,a.kt)("h3",{id:"react-profiler"},(0,a.kt)("a",{parentName:"h3",href:"https://zh-hant.reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html"},"React Profiler")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Install ",(0,a.kt)("a",{parentName:"li",href:"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi"},"React Developer Tools")),(0,a.kt)("li",{parentName:"ul"},"Open Chrome Devtools -> ","[Profiler]"," Tab"),(0,a.kt)("li",{parentName:"ul"},"Settings -> General -> ","[v]"," Highlight updates when components render.")),(0,a.kt)("h3",{id:"profiler-api"},(0,a.kt)("a",{parentName:"h3",href:"https://zh-hant.reactjs.org/docs/profiler.html"},"Profiler API")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import React, { Profiler } from "react";\nconst CustomStockChart = (props) => {\n  // ...\n\n  return (\n    <Profiler id="StockChart" onRender={logTimes}>\n      <StockChart>{/* ... */}</StockChart>\n    </Profiler>\n  );\n};\n\nconst logTimes = (id, phase, actualTime, baseTime, startTime, commitTime) => {\n  console.log(`${id}\'s ${phase} phase:`);\n  console.log(`Actual time: ${actualTime}`);\n  console.log(`Base time: ${baseTime}`);\n  console.log(`Start time: ${startTime}`);\n  console.log(`Commit time: ${commitTime}`);\n};\n\nexport default CustomStockChart;\n')),(0,a.kt)("h3",{id:"meaning-of-profiling-value"},(0,a.kt)("a",{parentName:"h3",href:"https://reactjs.org/docs/profiler.html#onrender-callback"},"Meaning of Profiling value")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"id: string - The id prop of the Profiler tree that has just committed. This can be used to identify which part of the tree was committed if you are using multiple profilers.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'phase: "mount" | "update" - Identifies whether the tree has just been mounted for the first time or re-rendered due to a change in props, state, or hooks.')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"actualDuration: number - Time spent rendering the Profiler and its descendants for the current update. This indicates how well the subtree makes use of memoization (e.g. React.memo, useMemo, shouldComponentUpdate). Ideally this value should decrease significantly after the initial mount as many of the descendants will only need to re-render if their specific props change.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"baseDuration: number - Duration of the most recent render time for each individual component within the Profiler tree. This value estimates a worst-case cost of rendering (e.g. the initial mount or a tree with no memoization)."))),(0,a.kt)("h2",{id:"reference"},"Reference"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.codebeast.dev/react-memoize-hooks-useRef-useCallback-useMemo/"},"A Closer Look at React Memoize Hooks: useRef, useCallback, and useMemo")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://zh-hant.reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html"},"Introducing the React Profiler")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://medium.com/botbonnie/%E4%BD%BF%E7%94%A8-react-profiler-%E4%BE%86%E8%A7%80%E5%AF%9F-react-web-app-%E7%9A%84%E6%B8%B2%E6%9F%93%E7%8B%80%E6%B3%81%E4%B8%A6%E9%80%B2%E8%A1%8C%E6%95%88%E8%83%BD%E5%84%AA%E5%8C%96-bde15fe3d267"},"\u4f7f\u7528 React Profiler \u4f86\u89c0\u5bdf React Web App \u7684\u6e32\u67d3\u72c0\u6cc1\u4e26\u9032\u884c\u6548\u80fd\u512a\u5316")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://developer.chrome.com/docs/devtools/evaluate-performance/reference/"},"Chrome: Performance features reference"))),(0,a.kt)("h6",{id:"tags-react"},"tags: ",(0,a.kt)("inlineCode",{parentName:"h6"},"React")))}p.isMDXComponent=!0}}]);