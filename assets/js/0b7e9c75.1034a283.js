(self.webpackChunkhhow_09_github_io=self.webpackChunkhhow_09_github_io||[]).push([[6061],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return d}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,k=c["".concat(p,".").concat(d)]||c[d]||u[d]||a;return n?i.createElement(k,o(o({ref:t},m),{},{components:n})):i.createElement(k,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2025:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return p},toc:function(){return s},default:function(){return u}});var i=n(2122),r=n(9756),a=(n(7294),n(3905)),o=["components"],l={},p={unversionedId:"algorithm/leetcode-474-ones-and-zeroes",id:"algorithm/leetcode-474-ones-and-zeroes",isDocsHomePage:!1,title:"474. Ones and Zeroes",description:"- https://leetcode.com/problems/ones-and-zeroes/",source:"@site/docs/algorithm/leetcode-474-ones-and-zeroes.md",sourceDirName:"algorithm",slug:"/algorithm/leetcode-474-ones-and-zeroes",permalink:"/algorithm/leetcode-474-ones-and-zeroes",editUrl:"https://github.com/hhow09/hhow09.github.io/blob/source/docs/algorithm/leetcode-474-ones-and-zeroes.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Index",permalink:"/"},next:{title:"698. Partition to K Equal Sum Subsets",permalink:"/algorithm/leetcode-698-partition-to-k-equal-sum-subsets"}},s=[{value:"Problem",id:"problem",children:[]},{value:"Explanation",id:"explanation",children:[{value:"Identify Problem",id:"identify-problem",children:[]},{value:"DP matrix:",id:"dp-matrix",children:[]},{value:"Transition Function",id:"transition-function",children:[]},{value:"Iteration Direction",id:"iteration-direction",children:[]}]},{value:"Solution",id:"solution",children:[{value:"Complexity",id:"complexity",children:[]}]}],m={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/ones-and-zeroes/"},"https://leetcode.com/problems/ones-and-zeroes/")),(0,a.kt)("li",{parentName:"ul"},"Difficulty: ",(0,a.kt)("inlineCode",{parentName:"li"},"Medium")),(0,a.kt)("li",{parentName:"ul"},"Related Topics: ",(0,a.kt)("inlineCode",{parentName:"li"},"Array"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"String"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Dynamic Programming")),(0,a.kt)("li",{parentName:"ul"},"Similar Questions: ",(0,a.kt)("inlineCode",{parentName:"li"},"Count Subarrays With More Ones Than Zeros"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Non-negative Integers without Consecutive Ones"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"All Divisions With the Highest Score of a Binary Array"))),(0,a.kt)("h2",{id:"problem"},"Problem"),(0,a.kt)("p",null,"You are given an array of binary strings ",(0,a.kt)("inlineCode",{parentName:"p"},"strs")," and two integers ",(0,a.kt)("inlineCode",{parentName:"p"},"m")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),"."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the size of the largest subset of ",(0,a.kt)("inlineCode",{parentName:"em"},"strs")," such that there are ",(0,a.kt)("strong",{parentName:"em"},"at most")," ",(0,a.kt)("inlineCode",{parentName:"em"},"m")," ",(0,a.kt)("inlineCode",{parentName:"em"},"0")),"'s and* ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," 's in the subset."),(0,a.kt)("p",null,"A set ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," is a ",(0,a.kt)("strong",{parentName:"p"},"subset")," of a set ",(0,a.kt)("inlineCode",{parentName:"p"},"y")," if all elements of ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," are also elements of ",(0,a.kt)("inlineCode",{parentName:"p"},"y"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'\nInput: strs = ["10","0001","111001","1","0"], m = 5, n = 3\nOutput: 4\nExplanation: The largest subset with at most 5 0\'s and 3 1\'s is {"10", "0001", "1", "0"}, so the answer is 4.\nOther valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.\n{"111001"} is an invalid subset because it contains 4 1\'s, greater than the maximum of 3.\n\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'\nInput: strs = ["10","0","1"], m = 1, n = 1\nOutput: 2\nExplanation: The largest subset is {"0", "1"}, so the answer is 2.\n\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= strs.length <= 600")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= strs[i].length <= 100")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"strs[i]")," consists only of digits ",(0,a.kt)("inlineCode",{parentName:"li"},"'0'")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"'1'"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 100"))),(0,a.kt)("h2",{id:"explanation"},"Explanation"),(0,a.kt)("h3",{id:"identify-problem"},"Identify Problem"),(0,a.kt)("p",null,"This is a ",(0,a.kt)("strong",{parentName:"p"},"0/1 knapsack")," problem with 2 constraints.\nThe value of items ( total count ) are equal."),(0,a.kt)("h3",{id:"dp-matrix"},"DP matrix:"),(0,a.kt)("p",null,"we have ",(0,a.kt)("inlineCode",{parentName:"p"},"dp[i][j][k]"),": the max number of strings that can be formed with ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"'s and ",(0,a.kt)("inlineCode",{parentName:"p"},"j")," ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),"  's"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"i")," is count of zero"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"j")," is count of one"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"k")," is the index of element")),(0,a.kt)("p",null,"Since we need maximum so the ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),"-axis can be flattened."),(0,a.kt)("p",null,"Then we have ",(0,a.kt)("inlineCode",{parentName:"p"},"dp[i][j]")),(0,a.kt)("h3",{id:"transition-function"},"Transition Function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"dp[i][j] = max( dp[i][j] , dp[i-c0][j-c1]+1 )\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"c0"),": the ",(0,a.kt)("inlineCode",{parentName:"li"},"0-count")," of current string"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"c1"),": the ",(0,a.kt)("inlineCode",{parentName:"li"},"1-count")," of current string")),(0,a.kt)("h3",{id:"iteration-direction"},"Iteration Direction"),(0,a.kt)("p",null,"For each string (Loop 1) we are updating 2D dp matrix (Loop 2, Loop 3)."),(0,a.kt)("p",null,"For Loop2 and Loop3, We need to iteration from ",(0,a.kt)("strong",{parentName:"p"},"bottom-right")," to ",(0,a.kt)("strong",{parentName:"p"},"left-top")," because it should NOT re-use the result from current iteration. it will cause overcounting."),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:\n        dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n        counts = [collections.Counter(s) for s in strs]\n        counts = [(c['0'], c['1']) for c in counts]\n        \n        for c0,c1 in counts: # Loop 1\n            for i in range(m, c0-1, -1): # Loop 2\n                for j in range(n, c1-1, -1): # Loop 3\n                    dp[i][j] = max(dp[i][j], dp[i-c0][j-c1]+1)\n        return dp[m][n]\n")),(0,a.kt)("h3",{id:"complexity"},"Complexity"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time complexity : ",(0,a.kt)("inlineCode",{parentName:"li"},"O(N*m*n)")),(0,a.kt)("li",{parentName:"ul"},"Space complexity : ",(0,a.kt)("inlineCode",{parentName:"li"},"O(m*n)"))))}u.isMDXComponent=!0}}]);