(self.webpackChunkhhow_09_github_io=self.webpackChunkhhow_09_github_io||[]).push([[2704],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),m=i,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9999:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var n=a(2122),i=a(9756),r=(a(7294),a(3905)),o=["components"],s={},l={unversionedId:"system/cap",id:"system/cap",isDocsHomePage:!1,title:"C.A.P Theorem",description:"Intro",source:"@site/docs/system/1-cap.md",sourceDirName:"system",slug:"/system/cap",permalink:"/system/cap",editUrl:"https://github.com/hhow09/hhow09.github.io/blob/source/docs/system/1-cap.md",version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"React v.s. Vue",permalink:"/react/react-vs-vue"},next:{title:"Distributed Cache",permalink:"/system/distributed-cache"}},c=[{value:"Intro",id:"intro",children:[]},{value:"Eventual consistency (AP database)",id:"eventual-consistency-ap-database",children:[]},{value:"Atomic consistency (Linearizability)",id:"atomic-consistency-linearizability",children:[{value:"Linearizability",id:"linearizability",children:[]},{value:"What happens if you don&#39;t have Linearizability?",id:"what-happens-if-you-dont-have-linearizability",children:[]}]},{value:"CAP theorem NoSQL database types",id:"cap-theorem-nosql-database-types",children:[{value:"CP database",id:"cp-database",children:[]},{value:"AP database",id:"ap-database",children:[]}]},{value:"CP/AP: a false dichotomy",id:"cpap-a-false-dichotomy",children:[]},{value:"Reference",id:"reference",children:[]}],p={toc:c};function d(e){var t=e.components,s=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"intro"},"Intro"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"CAP Theorem")," says that it is impossible to build an implementation of read-write storage in an asynchronous network that satisfies all of the following three properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Availability - will a request made to the data store always eventually complete?"),(0,r.kt)("li",{parentName:"ul"},"Consistency - will all executions of reads and writes seen by all nodes be atomic/linearizably consistent?"),(0,r.kt)("li",{parentName:"ul"},"Partition tolerance - the network is allowed to drop any messages.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("strong",{parentName:"li"},"partition")," is a communications break within a distributed system\u2014a lost or temporarily delayed connection between two nodes.")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"eventual-consistency-ap-database"},"Eventual consistency (AP database)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Eventual consistency is a distributed computing model ",(0,r.kt)("strong",{parentName:"li"},"emphasizing speed or low latency over the risk of displaying stale or outdated data"),". The data will ",(0,r.kt)("strong",{parentName:"li"},"eventually")," show once all of the replicated nodes are up-to-date."),(0,r.kt)("li",{parentName:"ul"},"If the priority is ",(0,r.kt)("strong",{parentName:"li"},"data availability"),", then the data may not be updated on all the nodes simultaneously. The availability is faster, but the tradeoff is data accuracy. i.e. ",(0,r.kt)("inlineCode",{parentName:"li"},"A")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"P")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"CAP theorem")),(0,r.kt)("li",{parentName:"ul"},"NoSQL databases that manage non-structured data are often good choices for ",(0,r.kt)("strong",{parentName:"li"},"eventual consistency models"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Why?"))),(0,r.kt)("li",{parentName:"ul"},"Eventual consistency may violate Atomic Consistency")),(0,r.kt)("h2",{id:"atomic-consistency-linearizability"},"Atomic consistency (Linearizability)"),(0,r.kt)("h3",{id:"linearizability"},"Linearizability"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(3446).Z})),(0,r.kt)("h3",{id:"what-happens-if-you-dont-have-linearizability"},"What happens if you don't have Linearizability?"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(8770).Z})),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"cap-theorem-nosql-database-types"},"CAP theorem NoSQL database types"),(0,r.kt)("h3",{id:"cp-database"},"CP database"),(0,r.kt)("p",null,"A CP database delivers consistency and partition tolerance ",(0,r.kt)("strong",{parentName:"p"},"at the expense of availability"),". When a partition occurs between any two nodes, the system has to shut down the non-consistent node (i.e., make it unavailable) until the partition is resolved."),(0,r.kt)("h4",{id:"example-mongodb"},"Example: MongoDB"),(0,r.kt)("h3",{id:"ap-database"},"AP database"),(0,r.kt)("p",null,"An AP database delivers availability and partition tolerance ",(0,r.kt)("strong",{parentName:"p"},"at the expense of consistency"),". When a partition occurs, all nodes remain available but those at the wrong end of a partition ",(0,r.kt)("strong",{parentName:"p"},"might return an older version of data than others"),". When the partition is resolved, the AP databases typically resync the nodes to repair all inconsistencies in the system."),(0,r.kt)("h4",{id:"example-cassandra"},"Example: Cassandra"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"cpap-a-false-dichotomy"},"CP/AP: a false dichotomy"),(0,r.kt)("p",null,"The fact that we haven\u2019t been able to classify even one datastore as unambiguously ",(0,r.kt)("inlineCode",{parentName:"p"},"AP")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"CP")," should be telling us something: those are simply not the right labels to describe systems."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Within one piece of software, you may well have various operations with ",(0,r.kt)("strong",{parentName:"p"},"different consistency characteristics"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Many systems are neither consistent nor available under the CAP theorem\u2019s definitions. However, I\u2019ve never heard anyone call their system just \u201cP\u201d, presumably because it looks bad. But it\u2019s not bad \u2013 it may be a perfectly reasonable design, it just doesn\u2019t fit one of the two ",(0,r.kt)("inlineCode",{parentName:"p"},"CP"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"AP")," buckets.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Even though most software doesn\u2019t neatly fit one of those two buckets, people try to shoehorn software into one of the two buckets anyway, thereby inevitably changing the meaning of ",(0,r.kt)("inlineCode",{parentName:"p"},"consistency")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"availability")," to whatever definition suits them. Unfortunately, if the meaning of the words is changed, the CAP theorem no longer applies, and thus the ",(0,r.kt)("inlineCode",{parentName:"p"},"CP"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"AP")," distinction is rendered completely meaningless.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A huge amount of subtlety is lost by putting a system in one of two buckets. There are many considerations of fault-tolerance, latency, simplicity of programming model, operability, etc. that feed into the design of a distributed systems. It is simply not possible to encode this subtlety in one bit of information. For example, even though ZooKeeper has an ",(0,r.kt)("inlineCode",{parentName:"p"},"AP")," read-only mode, this mode still provides a total ordering of historical writes, which is a vastly stronger guarantee than the ",(0,r.kt)("inlineCode",{parentName:"p"},"AP")," in a system like ",(0,r.kt)("inlineCode",{parentName:"p"},"Riak")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Cassandra")," \u2013 so it\u2019s ridiculous to throw them into the same bucket.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Even ",(0,r.kt)("a",{parentName:"p",href:"http://cs609.cs.ua.edu/CAP12.pdf"},"Eric Brewer admits that CAP is misleading and oversimplified"),". In 2000, it was meant to start a discussion about trade-offs in distributed data systems, and it did that very well. It wasn\u2019t intended to be a breakthrough formal result, nor was it meant to be a rigorous classification scheme for data systems. 15 years later, we now have a much greater range of tools with different consistency and fault-tolerance models to choose from. CAP has served its purpose, and now it\u2019s time to move on."))),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/henryr/cap-faq"},"The CAP FAQ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://medium.com/%E5%BE%8C%E7%AB%AF%E6%96%B0%E6%89%8B%E6%9D%91/cap%E5%AE%9A%E7%90%86101-3fdd10e0b9a"},"CAP \u5b9a\u7406 101\u2014\u5206\u6563\u5f0f\u7cfb\u7d71\uff0c\u6709\u4e00\u597d\u6c92\u5169\u597d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html"},"Please stop calling databases CP or AP"))))}d.isMDXComponent=!0},3446:function(e,t,a){"use strict";t.Z=a.p+"assets/images/linearizability-dfb4235c358061b2b4e780fb66f6859b.png"},8770:function(e,t,a){"use strict";t.Z=a.p+"assets/images/not-linearizability-b8ee3dc6356a720b08f1717df88f0eda.png"}}]);