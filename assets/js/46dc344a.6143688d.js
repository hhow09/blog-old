(self.webpackChunkhhow_09_github_io=self.webpackChunkhhow_09_github_io||[]).push([[3662],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return k}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=u(n),k=a,d=c["".concat(l,".").concat(k)]||c[k]||p[k]||i;return n?r.createElement(d,o(o({ref:t},m),{},{components:n})):r.createElement(d,o({ref:t},m))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7428:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o=["components"],s={},l={unversionedId:"algorithm/leetcode-698-partition-to-k-equal-sum-subsets",id:"algorithm/leetcode-698-partition-to-k-equal-sum-subsets",isDocsHomePage:!1,title:"698. Partition to K Equal Sum Subsets",description:"-   https://leetcode.com/problems/partition-to-k-equal-sum-subsets/",source:"@site/docs/algorithm/leetcode-698-partition-to-k-equal-sum-subsets.md",sourceDirName:"algorithm",slug:"/algorithm/leetcode-698-partition-to-k-equal-sum-subsets",permalink:"/algorithm/leetcode-698-partition-to-k-equal-sum-subsets",editUrl:"https://github.com/hhow09/hhow09.github.io/blob/source/docs/algorithm/leetcode-698-partition-to-k-equal-sum-subsets.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"474. Ones and Zeroes",permalink:"/algorithm/leetcode-474-ones-and-zeroes"},next:{title:"Index",permalink:"/data-structure/index"}},u=[{value:"Problem",id:"problem",children:[]},{value:"Solution 1 - Backtracking",id:"solution-1---backtracking",children:[]},{value:"Solution 2 - Bit Mask",id:"solution-2---bit-mask",children:[{value:"Explanation",id:"explanation",children:[]}]},{value:"Reference",id:"reference",children:[]}],m={toc:u};function p(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/partition-to-k-equal-sum-subsets/"},"https://leetcode.com/problems/partition-to-k-equal-sum-subsets/")),(0,i.kt)("li",{parentName:"ul"},"Difficulty: ",(0,i.kt)("inlineCode",{parentName:"li"},"Medium")),(0,i.kt)("li",{parentName:"ul"},"Related Topics: ",(0,i.kt)("inlineCode",{parentName:"li"},"Array"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Dynamic Programming"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Backtracking"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Bit Manipulation"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Memoization"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Bitmask")),(0,i.kt)("li",{parentName:"ul"},"Similar Questions: ",(0,i.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/partition-equal-subset-sum/"},"416. Partition Equal Subset Sum"))),(0,i.kt)("h2",{id:"problem"},"Problem"),(0,i.kt)("p",null,"Given an integer array ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,i.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if it is possible to divide this array into ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," non-empty subsets whose sums are all equal."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [4,3,2,3,5,2,1], k = 4\nOutput: true\nExplanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [1,2,3,4], k = 3\nOutput: false\n")),(0,i.kt)("h2",{id:"solution-1---backtracking"},"Solution 1 - Backtracking"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        allSum = sum(nums)\n        if len(nums)<k or allSum %k !=0: return False\n        nums.sort(reverse=True) # reverse for speed up\n        parts = [allSum/k]*k\n\n        def backtrack(parts, idx):\n            if idx == len(nums):\n                return sum(parts) == 0\n            for i in range(len(parts)):\n                if parts[i]>= nums[idx]:\n                    parts[i] -= nums[idx]\n                    if backtrack(parts,idx+1): return True\n                    parts[i] += nums[idx]\n\n        return backtrack(parts, 0)\n")),(0,i.kt)("h2",{id:"solution-2---bit-mask"},"Solution 2 - Bit Mask"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        if len(nums) < k or int(sum(nums)/k) != sum(nums)/k: return False\n        N = len(nums)\n        nums.sort(reverse=True) #[2]Sort the array in descending order, to improve run time.\n        # print("nums", nums)\n        def dp(mask, cur, memo): # Top-down DP with memoization\n            # print("cur", cur)\n            # print("mask in binary:", format(mask, \'0\'+str(len(nums))+\'b\'))\n            if mask == 0: return cur == 0 #[3] If mask == 0, all the elements have been used, and we need to see whether cur is equal to 0.\n            elif cur == 0: return dp(mask, sum(nums)/k, memo) #[4] found an equal subset, but not some numbers haven\'t used. keep finding\n\n            if (mask, cur) not in memo:\n                res = False\n                for bit in range(N):\n                    # 1 << bit: left shift, add bit num of 0 to the right of 1\n                    # 1 << bit == pow(2, bit)\n                    if mask & (1 << bit): #[6] Check whether the number is unused. A set bit (1) means unused, 0 means used.\n                        if nums[bit] > cur: continue\n                        if dp(mask ^ (1 << bit), cur-nums[bit], memo): #[7] Use XOR to mark set bit as used (change from 1 to 0)\n                            res = True\n                            break\n                memo[(mask, cur)] = res\n            return memo[(mask, cur)]\n\n        return dp(pow(2,N)-1, sum(nums)/k, dict()) #[8]  Initialize mask as 11111...., N set bits.\n')),(0,i.kt)("h3",{id:"explanation"},"Explanation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"for sorted nums ",(0,i.kt)("inlineCode",{parentName:"p"},"[1, 3 ,7, 10]"),","),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"bitmask ",(0,i.kt)("inlineCode",{parentName:"li"},"0000")," means subset ",(0,i.kt)("inlineCode",{parentName:"li"},"[]")),(0,i.kt)("li",{parentName:"ul"},"bitmask ",(0,i.kt)("inlineCode",{parentName:"li"},"0110")," means subset ",(0,i.kt)("inlineCode",{parentName:"li"},"[3,7]")),(0,i.kt)("li",{parentName:"ul"},"bitmask ",(0,i.kt)("inlineCode",{parentName:"li"},"1111")," means subset ",(0,i.kt)("inlineCode",{parentName:"li"},"[1,3,7,10]")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"start with mask ",(0,i.kt)("inlineCode",{parentName:"p"},"1111"),", means all unused")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"1 << bit")," == ",(0,i.kt)("inlineCode",{parentName:"p"},"pow(2,bit)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"use ",(0,i.kt)("strong",{parentName:"p"},"AND gate")," (",(0,i.kt)("inlineCode",{parentName:"p"},"&"),") of mask and (1 << bit) to check if specific ",(0,i.kt)("inlineCode",{parentName:"p"},"nums[bit]")," is unused.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"use ",(0,i.kt)("strong",{parentName:"p"},"XOR gate")," (",(0,i.kt)("inlineCode",{parentName:"p"},"^"),") of mask and (1 << bit) to mark ",(0,i.kt)("inlineCode",{parentName:"p"},"nums[bit]")," as used."))),(0,i.kt)("h2",{id:"reference"},"Reference"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/partition-to-k-equal-sum-subsets/discuss/867956/Python3-Two-solutions-DP-with-Bit-mask(48ms)-DFS%2Bbacktracking-with-detailed-explanations"},"https://leetcode.com/problems/partition-to-k-equal-sum-subsets/discuss/867956/Python3-Two-solutions-DP-with-Bit-mask(48ms)-DFS%2Bbacktracking-with-detailed-explanations"))))}p.isMDXComponent=!0}}]);