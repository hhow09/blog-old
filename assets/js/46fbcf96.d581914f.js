(self.webpackChunkhhow_09_github_io=self.webpackChunkhhow_09_github_io||[]).push([[4520],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?i.createElement(h,o(o({ref:t},p),{},{components:n})):i.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8491:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var i=n(2122),r=n(9756),a=(n(7294),n(3905)),o=["components"],l={},s={unversionedId:"db/redis-university",id:"db/redis-university",isDocsHomePage:!1,title:"Redis",description:"Learning Resource",source:"@site/docs/db/2-redis-university.md",sourceDirName:"db",slug:"/db/redis-university",permalink:"/db/redis-university",editUrl:"https://github.com/hhow09/hhow09.github.io/blob/source/docs/db/2-redis-university.md",version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How to model one-to-many relationships in DynamoDB",permalink:"/db/dynamodb-modeling"},next:{title:"Kustomization to Helm 3 Migration",permalink:"/infra/kustomization-helm-migration"}},c=[{value:"Learning Resource",id:"learning-resource",children:[]},{value:"Strings",id:"strings",children:[{value:"Encoding",id:"encoding",children:[]},{value:"Reference",id:"reference",children:[]}]},{value:"Use Case: Faceted Searchcurrent section",id:"use-case-faceted-searchcurrent-section",children:[{value:"1. Object Inspections",id:"1-object-inspections",children:[]},{value:"2. Set Intersection",id:"2-set-intersection",children:[]},{value:"3. Hashed Keys",id:"3-hashed-keys",children:[]}]},{value:"Transactions",id:"transactions",children:[{value:"Watch",id:"watch",children:[]}]},{value:"Pipelining v.s. Transactions v.s. Lua Scripts",id:"pipelining-vs-transactions-vs-lua-scripts",children:[]}],p={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"learning-resource"},"Learning Resource"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://university.redis.com/courses/ru101/"},"Redis University RU101: Introduction to Redis Data Structures")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://university.redis.com/courses/ru102py/"},"Redis University RU102PY: Redis for Python Developers"))),(0,a.kt)("h2",{id:"strings"},"Strings"),(0,a.kt)("h3",{id:"encoding"},"Encoding"),(0,a.kt)("p",null,"Strings data type can be encoded as ",(0,a.kt)("inlineCode",{parentName:"p"},"raw"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"embstr")," (short string)"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"raw"),": "),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Raw is ",(0,a.kt)("inlineCode",{parentName:"li"},"redisObject")," + ",(0,a.kt)("inlineCode",{parentName:"li"},"sds"),". That is to say ",(0,a.kt)("inlineCode",{parentName:"li"},"redisObject")," Of ",(0,a.kt)("inlineCode",{parentName:"li"},"ptr")," Pointer to a ",(0,a.kt)("inlineCode",{parentName:"li"},"sdshdr")," Object."),(0,a.kt)("li",{parentName:"ul"},"Raw will call the memory allocation function ",(0,a.kt)("strong",{parentName:"li"},"twice")," to create the ",(0,a.kt)("inlineCode",{parentName:"li"},"redisobject")," structure and ",(0,a.kt)("inlineCode",{parentName:"li"},"sdshdr")," structure."),(0,a.kt)("li",{parentName:"ul"},"once encoded as ",(0,a.kt)("inlineCode",{parentName:"li"},"raw")," it will not return to ",(0,a.kt)("inlineCode",{parentName:"li"},"embstr")))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"embstr")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"which is a special encoding method for saving short strings."),(0,a.kt)("li",{parentName:"ul"},"If the string object holds a string value, and the length of the character\u2019s coarse value is less than or equal to ",(0,a.kt)("inlineCode",{parentName:"li"},"44")," Byte."),(0,a.kt)("li",{parentName:"ul"},"embedded string, which embeds the ",(0,a.kt)("inlineCode",{parentName:"li"},"sdshdr")," structure into the ",(0,a.kt)("inlineCode",{parentName:"li"},"redisobject"),"."),(0,a.kt)("li",{parentName:"ul"},"embstr code will call the memory allocation function ",(0,a.kt)("strong",{parentName:"li"},"once")," to allocate a piece of ",(0,a.kt)("strong",{parentName:"li"},"continuous space"),", which includes two structures: ",(0,a.kt)("inlineCode",{parentName:"li"},"redisObject")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"sdshdr")))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"int")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If a string object holds an integer, and the integer value can be identified by long type"),(0,a.kt)("li",{parentName:"ul"},"the pointer of the string object ",(0,a.kt)("inlineCode",{parentName:"li"},"redisObject")," will directly save the long value")))),(0,a.kt)("h3",{id:"reference"},"Reference"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://developpaper.com/redis-data-structure-2-string/"},"Redis data structure (2) \u2013 string"))),(0,a.kt)("h2",{id:"use-case-faceted-searchcurrent-section"},"Use Case: Faceted Searchcurrent section"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We have a collection of json items reside under different ",(0,a.kt)("inlineCode",{parentName:"li"},"KEY"),"s."),(0,a.kt)("li",{parentName:"ul"},"We want to search by ",(0,a.kt)("inlineCode",{parentName:"li"},"item_key=value1")," among multiple items."),(0,a.kt)("li",{parentName:"ul"},"Normally in database we have ",(0,a.kt)("strong",{parentName:"li"},"secondary index"),", however there is no index in Redis. ")),(0,a.kt)("h3",{id:"1-object-inspections"},"1. Object Inspections"),(0,a.kt)("p",null,"naive solution, no index, find one by one then filter."),(0,a.kt)("p",null,"Time complexity: ",(0,a.kt)("inlineCode",{parentName:"p"},"O(N)")),(0,a.kt)("h3",{id:"2-set-intersection"},"2. Set Intersection"),(0,a.kt)("p",null,"Maintain ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," as index for each search condition. e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},'a="Foo"'),", ",(0,a.kt)("inlineCode",{parentName:"p"},"b=true")),(0,a.kt)("p",null,"When searching for ",(0,a.kt)("inlineCode",{parentName:"p"},'a="Foo" && b=true'),", intersection (",(0,a.kt)("inlineCode",{parentName:"p"},"SINT"),") to sets."),(0,a.kt)("p",null,"Time complexity: ",(0,a.kt)("inlineCode",{parentName:"p"},"O(M*N)"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"M")," is the count of minimum set member and ",(0,a.kt)("inlineCode",{parentName:"p"},"N")," is the set count."),(0,a.kt)("p",null,"Tips: When doing intersection, start with the set with lowest cardinality."),(0,a.kt)("h3",{id:"3-hashed-keys"},"3. Hashed Keys"),(0,a.kt)("p",null,"Similar to ",(0,a.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/indexes-multicolumn.html"},"SQL Composite index")),(0,a.kt)("p",null,"Maintain ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," for all search combination. e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},'a="Foo" && b=true'),", ",(0,a.kt)("inlineCode",{parentName:"p"},'a="Foo" && b=false')),(0,a.kt)("p",null,"We will get better read performance because there is no ",(0,a.kt)("strong",{parentName:"p"},"Set Intersection")," needed when reading."),(0,a.kt)("p",null,"Time complexity: ",(0,a.kt)("inlineCode",{parentName:"p"},"O(N)"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"N")," is the set count."),(0,a.kt)("p",null,"good for read-heavy access pattern."),(0,a.kt)("h2",{id:"transactions"},"Transactions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Redis is single thread, transaction is serialized. "),(0,a.kt)("li",{parentName:"ul"},"command: ",(0,a.kt)("inlineCode",{parentName:"li"},"MULTI")," -> ...",(0,a.kt)("inlineCode",{parentName:"li"},"COMMANDS")," -> ",(0,a.kt)("inlineCode",{parentName:"li"},"EXEC"),". before ",(0,a.kt)("inlineCode",{parentName:"li"},"EXEC"),", commands are only ",(0,a.kt)("inlineCode",{parentName:"li"},"QUEUED")),(0,a.kt)("li",{parentName:"ul"},"Redis does not support rollback. If some of the commands fail in the transaction but all other commands which are successful are applied.")),(0,a.kt)("h3",{id:"watch"},"Watch"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"WATCH")," some key BEFORE ",(0,a.kt)("inlineCode",{parentName:"li"},"MULTI")," command"),(0,a.kt)("li",{parentName:"ul"},"Transaction will fail to execute if watched key changed.")),(0,a.kt)("h2",{id:"pipelining-vs-transactions-vs-lua-scripts"},"Pipelining v.s. Transactions v.s. Lua Scripts"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://rafaeleyng.github.io/redis-pipelining-transactions-and-lua-scripts"},"Redis: Pipelining, Transactions and Lua Scripts")))}d.isMDXComponent=!0}}]);