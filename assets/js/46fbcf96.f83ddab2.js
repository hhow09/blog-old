(self.webpackChunkhhow_09_github_io=self.webpackChunkhhow_09_github_io||[]).push([[4520],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,h=p["".concat(s,".").concat(m)]||p[m]||c[m]||r;return n?i.createElement(h,l(l({ref:t},u),{},{components:n})):i.createElement(h,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8491:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return d},default:function(){return c}});var i=n(2122),a=n(9756),r=(n(7294),n(3905)),l=["components"],o={},s={unversionedId:"db/redis-university",id:"db/redis-university",isDocsHomePage:!1,title:"Redis University Notes",description:"Learning Resource",source:"@site/docs/db/2-redis-university.md",sourceDirName:"db",slug:"/db/redis-university",permalink:"/db/redis-university",editUrl:"https://github.com/hhow09/hhow09.github.io/blob/source/docs/db/2-redis-university.md",version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How to model one-to-many relationships in DynamoDB",permalink:"/db/dynamodb-modeling"},next:{title:"Transaction Phenomenas",permalink:"/db/transaction-phenomena"}},d=[{value:"Learning Resource",id:"learning-resource",children:[]},{value:"Strings",id:"strings",children:[{value:"Encoding",id:"encoding",children:[]},{value:"Reference",id:"reference",children:[]}]},{value:"Use Case: Faceted Search",id:"use-case-faceted-search",children:[{value:"1. Object Inspections",id:"1-object-inspections",children:[]},{value:"2. Set Intersection",id:"2-set-intersection",children:[]},{value:"3. Hashed Keys",id:"3-hashed-keys",children:[]}]},{value:"Use Case: Object Storage with Hashes",id:"use-case-object-storage-with-hashes",children:[{value:"1. Serialization",id:"1-serialization",children:[]},{value:"2. Flatten",id:"2-flatten",children:[]},{value:"3. Different Hash",id:"3-different-hash",children:[]}]},{value:"Transactions",id:"transactions",children:[{value:"Watch",id:"watch",children:[]}]},{value:"Lua Scripting",id:"lua-scripting",children:[{value:"Why Lua",id:"why-lua",children:[]},{value:"Cons",id:"cons-2",children:[]},{value:"Long Run Lua Script",id:"long-run-lua-script",children:[]}]},{value:"Pipelining v.s. Transactions v.s. Lua Scripts",id:"pipelining-vs-transactions-vs-lua-scripts",children:[]},{value:"Use Case: Inventory with Lua",id:"use-case-inventory-with-lua",children:[{value:"Define State",id:"define-state",children:[]},{value:"Flow",id:"flow",children:[]}]}],u={toc:d};function c(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"learning-resource"},"Learning Resource"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://university.redis.com/courses/ru101/"},"Redis University RU101: Introduction to Redis Data Structures")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://university.redis.com/courses/ru102py/"},"Redis University RU102PY: Redis for Python Developers"))),(0,r.kt)("h2",{id:"strings"},"Strings"),(0,r.kt)("h3",{id:"encoding"},"Encoding"),(0,r.kt)("p",null,"Strings data type can be encoded as ",(0,r.kt)("inlineCode",{parentName:"p"},"raw"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"embstr")," (short string)"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"raw"),": "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Raw is ",(0,r.kt)("inlineCode",{parentName:"li"},"redisObject")," + ",(0,r.kt)("inlineCode",{parentName:"li"},"sds"),". That is to say ",(0,r.kt)("inlineCode",{parentName:"li"},"redisObject")," Of ",(0,r.kt)("inlineCode",{parentName:"li"},"ptr")," Pointer to a ",(0,r.kt)("inlineCode",{parentName:"li"},"sdshdr")," Object."),(0,r.kt)("li",{parentName:"ul"},"Raw will call the memory allocation function ",(0,r.kt)("strong",{parentName:"li"},"twice")," to create the ",(0,r.kt)("inlineCode",{parentName:"li"},"redisobject")," structure and ",(0,r.kt)("inlineCode",{parentName:"li"},"sdshdr")," structure."),(0,r.kt)("li",{parentName:"ul"},"once encoded as ",(0,r.kt)("inlineCode",{parentName:"li"},"raw")," it will not return to ",(0,r.kt)("inlineCode",{parentName:"li"},"embstr")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"embstr")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"which is a special encoding method for saving short strings."),(0,r.kt)("li",{parentName:"ul"},"If the string object holds a string value, and the length of the character\u2019s coarse value is less than or equal to ",(0,r.kt)("inlineCode",{parentName:"li"},"44")," Byte."),(0,r.kt)("li",{parentName:"ul"},"embedded string, which embeds the ",(0,r.kt)("inlineCode",{parentName:"li"},"sdshdr")," structure into the ",(0,r.kt)("inlineCode",{parentName:"li"},"redisobject"),"."),(0,r.kt)("li",{parentName:"ul"},"embstr code will call the memory allocation function ",(0,r.kt)("strong",{parentName:"li"},"once")," to allocate a piece of ",(0,r.kt)("strong",{parentName:"li"},"continuous space"),", which includes two structures: ",(0,r.kt)("inlineCode",{parentName:"li"},"redisObject")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"sdshdr")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"int")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If a string object holds an integer, and the integer value can be identified by long type"),(0,r.kt)("li",{parentName:"ul"},"the pointer of the string object ",(0,r.kt)("inlineCode",{parentName:"li"},"redisObject")," will directly save the long value")))),(0,r.kt)("h3",{id:"reference"},"Reference"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developpaper.com/redis-data-structure-2-string/"},"Redis data structure (2) \u2013 string"))),(0,r.kt)("h2",{id:"use-case-faceted-search"},"Use Case: Faceted Search"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We have a collection of json items reside under different ",(0,r.kt)("inlineCode",{parentName:"li"},"KEY"),"s."),(0,r.kt)("li",{parentName:"ul"},"We want to search by ",(0,r.kt)("inlineCode",{parentName:"li"},"item_key=value1")," among multiple items."),(0,r.kt)("li",{parentName:"ul"},"Normally in database we have ",(0,r.kt)("strong",{parentName:"li"},"secondary index"),", however ",(0,r.kt)("strong",{parentName:"li"},"there is no index in Redis"),". ")),(0,r.kt)("h3",{id:"1-object-inspections"},"1. Object Inspections"),(0,r.kt)("p",null,"naive solution, no index, find one by one then filter."),(0,r.kt)("p",null,"Time complexity: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(N)")),(0,r.kt)("h3",{id:"2-set-intersection"},"2. Set Intersection"),(0,r.kt)("p",null,"Maintain ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," as index for each search condition. e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},'a="Foo"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},"b=true")),(0,r.kt)("p",null,"When searching for ",(0,r.kt)("inlineCode",{parentName:"p"},'a="Foo" && b=true'),", intersection (",(0,r.kt)("inlineCode",{parentName:"p"},"SINT"),") to sets."),(0,r.kt)("p",null,"Time complexity: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(M*N)"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"M")," is the count of minimum set member and ",(0,r.kt)("inlineCode",{parentName:"p"},"N")," is the set count."),(0,r.kt)("p",null,"Tips: When doing intersection, start with the set with lowest cardinality."),(0,r.kt)("h3",{id:"3-hashed-keys"},"3. Hashed Keys"),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/indexes-multicolumn.html"},"SQL Composite index")),(0,r.kt)("p",null,"Maintain ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," for all search combination. e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},'a="Foo" && b=true'),", ",(0,r.kt)("inlineCode",{parentName:"p"},'a="Foo" && b=false')),(0,r.kt)("p",null,"We will get better read performance because there is no ",(0,r.kt)("strong",{parentName:"p"},"Set Intersection")," needed when reading."),(0,r.kt)("p",null,"Time complexity: ",(0,r.kt)("inlineCode",{parentName:"p"},"O(N)"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"N")," is the set count."),(0,r.kt)("p",null,"good for read-heavy access pattern."),(0,r.kt)("h2",{id:"use-case-object-storage-with-hashes"},"Use Case: Object Storage with Hashes"),(0,r.kt)("p",null,"Redis Hash cannot have nested hash. How can we save nested object in Redis?"),(0,r.kt)("h3",{id:"1-serialization"},"1. Serialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# save\nr = redis.Redis(host="127.0.0.1", port=6379, db=0, charset="utf-8", decode_responses=True)\nstudent = {\n            "id": 1,\n            "name": "Alex",\n            "surname": "Fox",\n            "age": "18",\n            "university": "Stanford",\n            "grades": {\n                "math": 100,\n                "physics": 90,\n                "informatics": 100\n            }\n        }\nr.set("student", json.dumps(student))\n\n# get \nstudent_obj_as_bytes = r.get("student")\ntype(student_obj_as_bytes) # <class \'bytes\'>\n')),(0,r.kt)("h4",{id:"cons"},"Cons"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cnnot index"),(0,r.kt)("li",{parentName:"ul"},"need to parse whole json if noly need part of it.")),(0,r.kt)("h3",{id:"2-flatten"},"2. Flatten"),(0,r.kt)("p",null,"Flatten with naming convention"),(0,r.kt)("h3",{id:"3-different-hash"},"3. Different Hash"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# save\nr = redis.Redis(host="127.0.0.1", port=6379, db=0)\nstudent = {\n            "id": 1,\n            "name": "Alex",\n            "surname": "Fox",\n            "age": "18",\n            "university": "Stanford",\n            "grades": \'student:alex:grades\'\n}\n\ndef get_student_key(student):\n    return f\'student:{student.id}\'\ndef get_student_grade_key(student):\n    return f\'student:{student.id}:grades\'\n\ndef save_student(redis, student):\n    student_key =get_student_key(student)\n    grade_key = get_student_grade_key(student)\n    # destructure nested\n    grades = student["grades"]\n    student["grades"] = grade_key # need to have consistent naming convention\n    \n    # save in hash\n    r.hmset(student_key, student)\n    r.hmset(grade_key, grades)\n\ndef get_student(redis, id):\n    student_key =get_student_key(student)\n    grade_key = get_student_grade_key(student)    \n    \n    # hgetall: Return a Python dict of the hash\u2019s name/value pairs\n    student = r.hgetall(grade_key)\n    grades = r.hgetall(grade_key)\n    student.grade = grade\n    return student\n')),(0,r.kt)("h4",{id:"pros"},"Pros"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"each hash has its own expiration."),(0,r.kt)("li",{parentName:"ul"},"can get partial data with ",(0,r.kt)("inlineCode",{parentName:"li"},"O(1)"))),(0,r.kt)("h4",{id:"cons-1"},"Cons"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"complexity of maintaining relationship")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"transactions"},"Transactions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Redis is single thread, transaction is serialized. "),(0,r.kt)("li",{parentName:"ul"},"command: ",(0,r.kt)("inlineCode",{parentName:"li"},"MULTI")," -> ...",(0,r.kt)("inlineCode",{parentName:"li"},"COMMANDS")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"EXEC"),". before ",(0,r.kt)("inlineCode",{parentName:"li"},"EXEC"),", commands are only ",(0,r.kt)("inlineCode",{parentName:"li"},"QUEUED")),(0,r.kt)("li",{parentName:"ul"},"Redis does not support rollback. If some of the commands fail in the transaction but all other commands which are successful are applied.")),(0,r.kt)("h3",{id:"watch"},"Watch"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WATCH")," some key BEFORE ",(0,r.kt)("inlineCode",{parentName:"li"},"MULTI")," command"),(0,r.kt)("li",{parentName:"ul"},"Transaction will fail to execute if watched key changed.")),(0,r.kt)("h2",{id:"lua-scripting"},"Lua Scripting"),(0,r.kt)("h3",{id:"why-lua"},"Why Lua"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"lua script is an ",(0,r.kt)("strong",{parentName:"li"},"atomic unit of execution")),(0,r.kt)("li",{parentName:"ul"},"it can reduce the round trip between client and redis-server"),(0,r.kt)("li",{parentName:"ul"},"script can be save and execute with ",(0,r.kt)("a",{parentName:"li",href:"https://redis.io/commands/evalsha/"},"EVALSHA"))),(0,r.kt)("h3",{id:"cons-2"},"Cons"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Lua will truncate float into integer, if we want to preserver float number, we need to return a string")),(0,r.kt)("h3",{id:"long-run-lua-script"},"Long Run Lua Script"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"lua command is ",(0,r.kt)("strong",{parentName:"li"},"blocking"),", however if the execution time exceeds ",(0,r.kt)("inlineCode",{parentName:"li"},"lua-time-limit")," (default ",(0,r.kt)("inlineCode",{parentName:"li"},"5")," s), it will start to accept client command and return ",(0,r.kt)("inlineCode",{parentName:"li"},"BUSY")," error. ")),(0,r.kt)("h2",{id:"pipelining-vs-transactions-vs-lua-scripts"},"Pipelining v.s. Transactions v.s. Lua Scripts"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://rafaeleyng.github.io/redis-pipelining-transactions-and-lua-scripts"},"Redis: Pipelining, Transactions and Lua Scripts")),(0,r.kt)("p",null,"// TODO"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"use-case-inventory-with-lua"},"Use Case: Inventory with Lua"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"code in ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/redislabs-training/ru101/tree/main/redisu/ru101/uc06-inventory-with-lua"},"uc06-inventory-with-lua"))),(0,r.kt)("h3",{id:"define-state"},"Define State"),(0,r.kt)("h4",{id:"purchase-state"},"Purchase State"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," (1)        (2)         (5)(6)(7).     (8)\nStart --\x3e Reserved --\x3e Authorize --\x3e Complete\n             \\               \\\n              Fail           Fail\n               (3)\n")),(0,r.kt)("h4",{id:"ticket-hold-state"},"Ticket Hold State"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"HELD --\x3e PREPARE --\x3e DELETED\n")),(0,r.kt)("h3",{id:"flow"},"Flow"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"execute lua script ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/redislabs-training/ru101/blob/main/redisu/ru101/uc06-inventory-with-lua/inventory-lua.py#L110"},"request_ticket_hold_v2_script")," performing:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"check if ",(0,r.kt)("inlineCode",{parentName:"li"},"held ticket count + request ticket count <= event_capacity")),(0,r.kt)("li",{parentName:"ol"},"create new ticket hold"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/redislabs-training/ru101/blob/main/redisu/ru101/uc06-inventory-with-lua/inventory-lua.py#L233"},"create_purchase")," to create an order hash, with state ",(0,r.kt)("inlineCode",{parentName:"li"},"RESERVE")," with an ",(0,r.kt)("strong",{parentName:"li"},"expiration time")," (",(0,r.kt)("inlineCode",{parentName:"li"},"hold_timeout"),")"),(0,r.kt)("li",{parentName:"ol"},"If ticket is not enough, flow Failed"),(0,r.kt)("li",{parentName:"ol"},"Now server wait the customer to enter payment info"),(0,r.kt)("li",{parentName:"ol"},"After received payment info, execute lua script performing:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"check if purchase is timeout, if cannot get ",(0,r.kt)("inlineCode",{parentName:"li"},"customer_hold_key")," means it's timeout."),(0,r.kt)("li",{parentName:"ol"},"Set the ",(0,r.kt)("inlineCode",{parentName:"li"},"customer_hold_key")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"PREPARE")," to wait payment check with lua script"))),(0,r.kt)("li",{parentName:"ol"},"Set the State to ",(0,r.kt)("inlineCode",{parentName:"li"},"Authorize")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"creditcard_auth")),(0,r.kt)("li",{parentName:"ol"},"execute lua script ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/redislabs-training/ru101/blob/main/redisu/ru101/uc06-inventory-with-lua/inventory-lua.py#L168"},"complete_purchase_script")," performing.",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"reduce the available ticket by the held count.     "),(0,r.kt)("li",{parentName:"ol"},"remove the ",(0,r.kt)("inlineCode",{parentName:"li"},"customer_hold_key")," "),(0,r.kt)("li",{parentName:"ol"},"Set the Purchase state ",(0,r.kt)("inlineCode",{parentName:"li"},"COMPLETE"))))))}c.isMDXComponent=!0}}]);