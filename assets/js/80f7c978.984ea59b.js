(self.webpackChunkhhow_09_github_io=self.webpackChunkhhow_09_github_io||[]).push([[4695],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,k=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6560:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),i=["components"],l={},s={unversionedId:"programming/js-event-loop",id:"programming/js-event-loop",isDocsHomePage:!1,title:"Node.js Event Loop",description:"What is Event Loop",source:"@site/docs/programming/15-js-event-loop.md",sourceDirName:"programming",slug:"/programming/js-event-loop",permalink:"/programming/js-event-loop",editUrl:"https://github.com/hhow09/hhow09.github.io/blob/source/docs/programming/15-js-event-loop.md",version:"current",sidebarPosition:15,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Javascript Dev Notes",permalink:"/programming/js-dev-note"},next:{title:"Props Drilling and State Management",permalink:"/react/react-prop-drilling"}},p=[{value:"What is Event Loop",id:"what-is-event-loop",children:[]},{value:"Concurrency Model and Event Loop",id:"concurrency-model-and-event-loop",children:[{value:"in Browser(Chrome)",id:"in-browserchrome",children:[]},{value:"in Node.js",id:"in-nodejs",children:[]}]},{value:"Terms: of architecture &amp; concept",id:"terms-of-architecture--concept",children:[{value:"libuv",id:"libuv",children:[]},{value:"I/O",id:"io",children:[]},{value:"Blocking v.s. Non-Blocking",id:"blocking-vs-non-blocking",children:[]},{value:"Events and event-driven programming",id:"events-and-event-driven-programming",children:[]},{value:"Thread Pool &amp; Is Node.js Single Thread?",id:"thread-pool--is-nodejs-single-thread",children:[]}]},{value:"Terms of Tasks",id:"terms-of-tasks",children:[{value:"Task ( = <code>Macrotask</code>)",id:"task---macrotask",children:[]},{value:"Microtask",id:"microtask",children:[]},{value:"Tick",id:"tick",children:[]}]},{value:"Event Loop in Node.js",id:"event-loop-in-nodejs",children:[]},{value:"Reference",id:"reference",children:[]}],c={toc:p};function m(e){var t=e.components,l=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"what-is-event-loop"},"What is Event Loop"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Event loop is a programming construct or design pattern that waits for and dispatches events or messages in a program."),(0,o.kt)("li",{parentName:"ul"},"Event Loop responsible for ",(0,o.kt)("strong",{parentName:"li"},"scheduling code executions"),", ",(0,o.kt)("strong",{parentName:"li"},"collecting and processing events"),", and ",(0,o.kt)("strong",{parentName:"li"},"scheduling queued sub-tasks"),"."),(0,o.kt)("li",{parentName:"ul"},"One of the important goal of event loop is provide ",(0,o.kt)("strong",{parentName:"li"},"non-blocking I/O operations")," for ",(0,o.kt)("strong",{parentName:"li"},"single-thread")," javascript engine."),(0,o.kt)("li",{parentName:"ul"},"How ",(0,o.kt)("inlineCode",{parentName:"li"},"libuv")," describe event loop",(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"In event-driven programming, an application expresses interest in certain events and respond to them when they occur. The responsibility of gathering events from the operating system or monitoring other sources of events is handled by libuv, and the user can register callbacks to be invoked when an event occurs. The event-loop usually keeps running forever."),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"In pseudocode:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"e = get the next event\nif there is a callback associated with e:\ncall the callback\n")))))),(0,o.kt)("li",{parentName:"ul"},"Event loop in ",(0,o.kt)("inlineCode",{parentName:"li"},"browser")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"Node.js")," ",(0,o.kt)("strong",{parentName:"li"},"is not part of the JS Engine (runtime)"),".")),(0,o.kt)("h2",{id:"concurrency-model-and-event-loop"},"Concurrency Model and Event Loop"),(0,o.kt)("h3",{id:"in-browserchrome"},"in Browser(Chrome)"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Chrome Event Loop",src:n(1098).Z})),(0,o.kt)("h3",{id:"in-nodejs"},"in Node.js"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Node.js Event Loop",src:n(1955).Z})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"While Nodejs uses the Google V8 as it's ",(0,o.kt)("strong",{parentName:"li"},"runtime"),", it does not used V8 to implement the ",(0,o.kt)("strong",{parentName:"li"},"event loop"),"."),(0,o.kt)("li",{parentName:"ul"},"Nodejs uses the ",(0,o.kt)("strong",{parentName:"li"},"Libuv")," library (written in C) to implement the event loop.")),(0,o.kt)("h2",{id:"terms-of-architecture--concept"},"Terms: of architecture & concept"),(0,o.kt)("h3",{id:"libuv"},(0,o.kt)("a",{parentName:"h3",href:"https://github.com/libuv/libuv"},"libuv")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"libuv is a multi-platform support library with a focus on asynchronous I/O.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It was primarily developed for use by Node.js")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"libuv enforces an ",(0,o.kt)("strong",{parentName:"p"},"asynchronous"),", ",(0,o.kt)("strong",{parentName:"p"},"event-driven")," style of programming.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Its core job is to provide an ",(0,o.kt)("strong",{parentName:"p"},"event loop")," and ",(0,o.kt)("strong",{parentName:"p"},"callback based notifications of I/O")," and other activities.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"libuv offers core utilities like ",(0,o.kt)("strong",{parentName:"p"},"timers"),", ",(0,o.kt)("strong",{parentName:"p"},"non-blocking networking support"),", ",(0,o.kt)("strong",{parentName:"p"},"asynchronous file system access"),", ",(0,o.kt)("strong",{parentName:"p"},"child processes")," and more.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"ref: ",(0,o.kt)("a",{parentName:"p",href:"http://docs.libuv.org/en/v1.x/guide/basics.html"},"Basics of libuv")))),(0,o.kt)("h3",{id:"io"},"I/O"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Short for input/output, I/O refers primarily to the ",(0,o.kt)("strong",{parentName:"li"},"program\u2019s interaction with the system\u2019s disk and network"),"."),(0,o.kt)("li",{parentName:"ul"},"Examples of I/O operations include ",(0,o.kt)("strong",{parentName:"li"},"reading/writing data from/to a disk")," (",(0,o.kt)("inlineCode",{parentName:"li"},"fs.readfileSync()"),"), ",(0,o.kt)("strong",{parentName:"li"},"making HTTP requests"),", and ",(0,o.kt)("strong",{parentName:"li"},"talking to databases"),"."),(0,o.kt)("li",{parentName:"ul"},"I/Os are very slow compared to ",(0,o.kt)("strong",{parentName:"li"},"accessing RAM")," or ",(0,o.kt)("strong",{parentName:"li"},"doing work on the CPU"),".")),(0,o.kt)("h3",{id:"blocking-vs-non-blocking"},"Blocking v.s. Non-Blocking"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Blocking is when the execution of additional JavaScript in the Node.js process ",(0,o.kt)("strong",{parentName:"li"},"must wait until a non-JavaScript operation completes"),"."),(0,o.kt)("li",{parentName:"ul"},"Blocking happens because the event loop is unable to continue running JavaScript while a blocking operation is occurring."),(0,o.kt)("li",{parentName:"ul"},"In Node.js, non-blocking primarily refers to ",(0,o.kt)("strong",{parentName:"li"},"I/O operations")),(0,o.kt)("li",{parentName:"ul"},"All of the I/O methods in the Node.js standard library provide async versions."),(0,o.kt)("li",{parentName:"ul"},"Blocking methods execute ",(0,o.kt)("strong",{parentName:"li"},"synchronously")," and non-blocking methods execute ",(0,o.kt)("strong",{parentName:"li"},"asynchronously"),".")),(0,o.kt)("h3",{id:"events-and-event-driven-programming"},"Events and event-driven programming"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Events")," are actions generated by the user or the system, like a click, a completed file download, or a hardware or software error."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Event-driven programming")," is a programming paradigm in which the ",(0,o.kt)("strong",{parentName:"li"},"flow of the program is determined by events"),"."),(0,o.kt)("li",{parentName:"ul"},"An event-driven program performs actions in response to events. When an event occurs it triggers a callback function.")),(0,o.kt)("h3",{id:"thread-pool--is-nodejs-single-thread"},"Thread Pool & Is Node.js Single Thread?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"in general code in Node.js is running with single thread developer cannot spawn a new thread (exception: ",(0,o.kt)("a",{parentName:"li",href:"https://nodejs.org/api/worker_threads.html#worker_threads_class_worker"},"worker thread"),", and ",(0,o.kt)("a",{parentName:"li",href:"https://nodejs.org/api/child_process.html#child_process_child_process"},"child_process"),")"),(0,o.kt)("li",{parentName:"ul"},"I/Os, file system operations are ",(0,o.kt)("strong",{parentName:"li"},"multi-threaded")," (not part of the JS code)."),(0,o.kt)("li",{parentName:"ul"},"libuv / Node.js provides a ",(0,o.kt)("a",{parentName:"li",href:"http://docs.libuv.org/en/v1.x/threadpool.html"},"threadpool")," of ",(0,o.kt)("strong",{parentName:"li"},"default size 4"),"."),(0,o.kt)("li",{parentName:"ul"},"New updates of Node.js offers ",(0,o.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/workerpool"},"workerpool")," to create threads easily.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const crypto = require("crypto");\nconst start = Date.now();\n\n//crypto.pbkdf2 is running in thread pool\nfunction logHashTime() {\n  crypto.pbkdf2("a", "b", 100000, 512, "sha512", () => {\n    console.log("Hash: ", Date.now() - start);\n  });\n}\n// default size of thread pool is 4\n// first 4 will be execute in parallel (almost same time)\nlogHashTime();\nlogHashTime();\nlogHashTime();\nlogHashTime();\n\n// 5th one will be execute later.\nlogHashTime();\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"ref: ",(0,o.kt)("a",{parentName:"li",href:"https://blog.logrocket.com/node-js-multithreading-what-are-worker-threads-and-why-do-they-matter-48ab102f8b10/"},"Node.js multithreading: What are Worker threads, and why do they matter?"))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"terms-of-tasks"},"Terms of Tasks"),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Priority of execution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Sync > Nanotask > Microtask > Task / Macrotask"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Note: ",(0,o.kt)("inlineCode",{parentName:"li"},"nanotask")," only exists in Node.js")),(0,o.kt)("h3",{id:"task---macrotask"},"Task ( = ",(0,o.kt)("inlineCode",{parentName:"h3"},"Macrotask"),")"),(0,o.kt)("h4",{id:"generic-task-sources"},(0,o.kt)("a",{parentName:"h4",href:"https://html.spec.whatwg.org/multipage/webappapis.html#generic-task-sources"},"Generic task sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"DOM manipulation/parsing"),(0,o.kt)("li",{parentName:"ul"},"User Interaction: keyboard or mouse input"),(0,o.kt)("li",{parentName:"ul"},"Network activity: ",(0,o.kt)("inlineCode",{parentName:"li"},"fetch"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"XMLHttpRequest")),(0,o.kt)("li",{parentName:"ul"},"history traversal: ",(0,o.kt)("inlineCode",{parentName:"li"},"history.back()")),(0,o.kt)("li",{parentName:"ul"},"Web APIs: ",(0,o.kt)("inlineCode",{parentName:"li"},"setTimeout"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"setInterval"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"setImmediate"),"(legacy), ",(0,o.kt)("inlineCode",{parentName:"li"},"requestAnimationFrame"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"I/O"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"UI rendering"))),(0,o.kt)("h3",{id:"microtask"},"Microtask"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"microtask")," is a short function which ",(0,o.kt)("strong",{parentName:"li"},"is executed after the function or program which created it exits and only if the JavaScript execution stack is empty, but before returning control to the event loop being used by the user agent to drive the script's execution environment"),"."),(0,o.kt)("li",{parentName:"ul"},"microtasks can queue other microtasks, while there are microtasks in the microtask queue, they should all be run one by one until the microtask queue is empty.")),(0,o.kt)("h4",{id:"example-of-microtask"},"Example of Microtask"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Promise"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise.then")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"process.nextTick")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Object.observe"))),(0,o.kt)("h3",{id:"tick"},"Tick"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a complete process of ",(0,o.kt)("inlineCode",{parentName:"li"},"one event loop")," including:",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"dequeuing")," of an event from the ",(0,o.kt)("inlineCode",{parentName:"li"},"event loop queue")),(0,o.kt)("li",{parentName:"ol"},"the execution of said event.")))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"event-loop-in-nodejs"},"Event Loop in Node.js"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"macrotask should be processed from the macrotask queue in one tick of the event loop. After this macrotask has finished, all other available microtasks should be processed within the same tick.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u250c\u2500>\u2502           timers          \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u2502     pending callbacks     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u2502       idle, prepare       \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502   incoming:   \u2502\n\u2502  \u2502           poll            \u2502<\u2500\u2500\u2500\u2500\u2500\u2524  connections, \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502   data, etc.  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502  \u2502           check           \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2514\u2500\u2500\u2524      close callbacks      \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,o.kt)("p",null,"//TODO"),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"reference"},"Reference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide"},"Using microtasks in JavaScript with queueMicrotask()"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://dev.to/khaosdoctor/node-js-under-the-hood-3-deep-dive-into-the-event-loop-135d"},"Node.js Under The Hood #3 - Deep Dive Into the Event Loop"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/"},"Node.js: Overview of Blocking vs Non-Blocking"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"http://docs.libuv.org/en/v1.x/guide/basics.html"},"libuv: Basics of libuv"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://www.freecodecamp.org/news/node-js-what-when-where-why-how-ab8424886e2/"},"Node.js: what it is, when and how to use it, and why you should"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#run-to-completion"},"MDN: Concurrency model and the event loop"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://pjchender.dev/javascript/note-event-loop-microtask/"},"PJChenDer: [Note] Event loop, micro-task, macro-task, async JavaScript \u7b46\u8a18"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://yeefun.github.io/event-loop-in-depth/?fbclid=IwAR0zHuodyFada1gfYL2P6CJjbHzxgX8KMAaUAlTsewERngKbswrf0guC-zU"},"\u6211\u77e5\u9053\u4f60\u61c2 Event Loop\uff0c\u4f46\u4f60\u4e86\u89e3\u5230\u591a\u6df1\uff1f"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://medium.com/infinitegamer/why-event-loop-exist-e8ac9d287044"},"\u3010\u7b46\u8a18\u3011\u5230\u5e95 Event Loop \u95dc\u6211\u5565\u4e8b\uff1f")))))}m.isMDXComponent=!0},1098:function(e,t,n){"use strict";t.Z=n.p+"assets/images/chrome-event-loop-ff8cd0def3c2feb790a62774dcf48f3b.png"},1955:function(e,t,n){"use strict";t.Z=n.p+"assets/images/nodejs-event-loop-978215883e4ad21debde58f8ca8746f9.png"}}]);