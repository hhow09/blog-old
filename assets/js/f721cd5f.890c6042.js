(self.webpackChunkhhow_09_github_io=self.webpackChunkhhow_09_github_io||[]).push([[1374],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return m},kt:function(){return d}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function u(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),s=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},m=function(e){var r=s(e.components);return n.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},c=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=u(e,["components","mdxType","originalType","parentName"]),c=s(t),d=a,f=c["".concat(l,".").concat(d)]||c[d]||p[d]||i;return t?n.createElement(f,o(o({ref:r},m),{},{components:t})):n.createElement(f,o({ref:r},m))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=c;var u={};for(var l in r)hasOwnProperty.call(r,l)&&(u[l]=r[l]);u.originalType=e,u.mdxType="string"==typeof e?e:a,o[1]=u;for(var s=2;s<i;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},1326:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return u},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var n=t(2122),a=t(9756),i=(t(7294),t(3905)),o=["components"],u={},l={unversionedId:"algorithm/prefix-sum",id:"algorithm/prefix-sum",isDocsHomePage:!1,title:"Prefix Sum",description:"\u6e05\u55ae",source:"@site/docs/algorithm/2-prefix-sum.md",sourceDirName:"algorithm",slug:"/algorithm/prefix-sum",permalink:"/algorithm/prefix-sum",editUrl:"https://github.com/hhow09/hhow09.github.io/blob/source/docs/algorithm/2-prefix-sum.md",version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Union Find",permalink:"/algorithm/union-find"},next:{title:"474. Ones and Zeroes",permalink:"/algorithm/leetcode-474-ones-and-zeroes"}},s=[{value:"\u6e05\u55ae",id:"\u6e05\u55ae",children:[]},{value:"\u4f7f\u7528\u6642\u6a5f",id:"\u4f7f\u7528\u6642\u6a5f",children:[]},{value:"1. \u55ae\u7d14\u6c42\u6307\u5b9a\u5340\u9593",id:"1-\u55ae\u7d14\u6c42\u6307\u5b9a\u5340\u9593",children:[]},{value:"2. \u642d\u914dsliding window",id:"2-\u642d\u914dsliding-window",children:[]},{value:"3. \u6c42subarray \u6578\u91cf",id:"3-\u6c42subarray-\u6578\u91cf",children:[{value:"\u540c\u985e",id:"\u540c\u985e",children:[]}]},{value:"4. subarray sum \u7b26\u5408\u689d\u4ef6",id:"4-subarray-sum-\u7b26\u5408\u689d\u4ef6",children:[{value:"\u540c\u985e",id:"\u540c\u985e-1",children:[]}]},{value:"5. Tree \u8b8a\u5f62",id:"5-tree-\u8b8a\u5f62",children:[]}],m={toc:s};function p(e){var r=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"\u6e05\u55ae"},"\u6e05\u55ae"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leetcode.com/tag/prefix-sum/"},"Leetcode - Prefix Sum")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://haren-lin-1.gitbook.io/leetcode-training/prefix-sum"},"Leetcode Training - Prefix Sum"))),(0,i.kt)("h2",{id:"\u4f7f\u7528\u6642\u6a5f"},"\u4f7f\u7528\u6642\u6a5f"),(0,i.kt)("p",null,"\u7576\u984c\u76ee\u662f\u6574\u6578 array \u4e14\u51fa\u73fe ",(0,i.kt)("strong",{parentName:"p"},"subarray sum")," \u6216\u8005 ",(0,i.kt)("strong",{parentName:"p"},"range sum")," \uff0c\u53ef\u4ee5\u8003\u616e\u4f7f\u7528prefix sum\u3002"),(0,i.kt)("p",null,"python\u53ef\u642d\u914d ",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/itertools.html#itertools.accumulate"},"itertools.accumulate")," \u4f7f\u7528"),(0,i.kt)("h2",{id:"1-\u55ae\u7d14\u6c42\u6307\u5b9a\u5340\u9593"},"1. \u55ae\u7d14\u6c42\u6307\u5b9a\u5340\u9593"),(0,i.kt)("p",null,"\u6ce8\u610f\u597d\u539farray \u8ddf prefix sum array\u7684index\u5c0d\u61c9\u5373\u53ef"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/range-sum-query-2d-immutable/"},"304. Range Sum Query 2D - Immutable")),(0,i.kt)("h2",{id:"2-\u642d\u914dsliding-window"},"2. \u642d\u914dsliding window"),(0,i.kt)("p",null,"\u901a\u5e38\u4f5c\u70ba\u8f14\u52a9 sliding window \u9700\u8981\u6703\u8a08\u7b97\u5340\u9593\u7d50\u679c"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-sum-of-two-non-overlapping-subarrays/"},"1031. Maximum Sum of Two Non-Overlapping Subarrays")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-erasure-value/"},"1695. Maximum Erasure Value")),(0,i.kt)("h2",{id:"3-\u6c42subarray-\u6578\u91cf"},"3. \u6c42subarray \u6578\u91cf"),(0,i.kt)("p",null,"\u642d\u914d hash map / counter \u7d00\u9304\u7b26\u5408\u7684\u6578\u91cf"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/subarray-sum-equals-k/"},"560. Subarray Sum Equals K")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def subarraySum(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        prefix_sum = list(itertools.accumulate(nums))\n        c = collections.Counter([0])\n        # counter \u521d\u59cb\u70ba [0] \u662f\u8981\u7b26\u5408 \u7576\u7b2c\u4e00\u500b\u6578\u5373\u70ba k \u7684\u689d\u4ef6\n        # counter \u7528\u4f86\u8a18\u9304\u5c0d\u6bcf\u500b i, sum(nums[0:i]) (inclusive) \u7684\u6578\u91cf\n        ans = 0\n        for prefix in prefix_sum:\n            ans += c[prefix-k]\n            # \u82e5\u51fa\u73fe prefix_sum[i] - prefix_sum[j] == k, \u610f\u5373 subarray nums[i:j] (inclusive) == k\n            c[prefix]+=1\n        return ans\n")),(0,i.kt)("h3",{id:"\u540c\u985e"},"\u540c\u985e"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/subarray-sums-divisible-by-k/"},"974. Subarray Sums Divisible by K"),"\n\u89e3\u6cd5\u985e\u4f3c 560")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/make-sum-divisible-by-p/"},"1590. Make Sum Divisible by P"),"\n974\u7684\u8b8a\u5f62\uff0c\u8b8a\u6210\u627e\u300c\u80fd\u628a\u539f\u672c\u9918\u6578 ",(0,i.kt)("inlineCode",{parentName:"p"},"sum(nums) % p")," \u53bb\u9664\u7684\u300dsubarray")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-erasure-value/"},"1695. Maximum Erasure Value")))),(0,i.kt)("h2",{id:"4-subarray-sum-\u7b26\u5408\u689d\u4ef6"},"4. subarray sum \u7b26\u5408\u689d\u4ef6"),(0,i.kt)("p",null,"\u689d\u4ef6\u53ef\u80fd\u662f: \u6307\u5b9asubarray\u9577\u5ea6 / \u6307\u5b9asubarray sum \u6c42\u6700\u77ed/\u6700\u9577\u53ef\u80fd\u9577\u5ea6"),(0,i.kt)("p",null,"\u5229\u7528 hash table \u7d00\u9304\u5404 prefix sum \u7684 index\u3002"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/"},"1658. Minimum Operations to Reduce X to Zero")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def minOperations(self, nums: List[int], x: int) -> int:\n        """\n        \u8981\u628a\u984c\u76ee\u7684\u300c\u5f9e\u5169\u908a\u6263\u6389\u300dx\uff0c\u60f3\u6210\u300c\u4e2d\u9593\u5269\u4e0b\u300d total - x\n        """\n        n = len(nums)\n        prefix = [0] + list(accumulate(nums))\n        d = {c: i for i,c in enumerate(prefix)}\n        # nums\u7686\u662f\u6b63\u6578, \u6240\u4ee5prefix\u70ba\u56b4\u683c\u905e\u589e, \u4e0d\u6703\u91cd\u8907\n        \n        goal = prefix[-1] - x # \u4e2d\u9593\u5269\u4e0b\u7684 window \u76ee\u6a19\n        if goal < 0 :\n            return -1\n        ans = math.inf\n        for num in d:\n            if num+goal in d:\n                ans = min(ans, n - (d[num+goal]- d[num]))\n        return ans if ans< math.inf else -1\n')),(0,i.kt)("h3",{id:"\u540c\u985e-1"},"\u540c\u985e"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/continuous-subarray-sum/"},"523. Continuous Subarray Sum")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/contiguous-array/"},"525. Contiguous Array"))),(0,i.kt)("h2",{id:"5-tree-\u8b8a\u5f62"},"5. Tree \u8b8a\u5f62"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/convert-bst-to-greater-tree/"},"538. Convert BST to Greater Tree")),(0,i.kt)("p",null,"\u984c\u76ee\u672c\u8eab\u70ba reversed in-order traversal \u7684 prefix sum"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def convertBST(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        self.accu = 0\n        def reverseInorder(node):\n            if not node:\n                return\n            reverseInorder(node.right)\n            val = node.val\n            node.val += self.accu\n            self.accu += val\n            reverseInorder(node.left)\n        \n        reverseInorder(root)\n        return root\n")))}p.isMDXComponent=!0}}]);